#!/usr/bin/env python
# -*- coding: utf-8 -*-
from phy_tools.gen_utils import ret_valid_path
import os

def gen_circbuff_logic(path):
    assert(path is not None), 'User must specify Path'
    path = ret_valid_path(path)
    mod_name = 'circ_buffer.v'
    file_name = os.path.join(path, mod_name)
    with open(file_name, 'w') as fh:

        fh.write('//***************************************************************************--\n')
        fh.write('//\n')
        fh.write('// Author : PJV\n')
        fh.write('// File : input_buffer\n')
        fh.write('// Description : The circular buffer implements the circular shifting functionality as\n')
        fh.write('// specified in "A Versatile Multichannel Filter Bank with Multiple Channel Bandwidths" paper.\n')
        fh.write('// It is implemented using multiple sample memores that allow the block to ping-pong between different memories.\n')
        fh.write('// This mitigates the requirement to throttle the input data stream.Input buffer to the M/2 Polyphase Channelizer bank.\n')
        fh.write('//      Buffer is hardcoded for a Maximum number of channels equal to 2048.\n')
        fh.write('//      Can be any power of 2 less than that.\n')
        fh.write('//\n')
        fh.write('//***************************************************************************\n')
        fh.write('module circ_buffer#(\n')
        fh.write('    parameter DATA_WIDTH = 32,\n')
        fh.write('    parameter FFT_SIZE_WIDTH = 12)\n')
        fh.write('(\n')
        fh.write('    input clk,\n')
        fh.write('    input sync_reset,\n')
        fh.write('    input s_axis_tvalid,\n')
        fh.write('    input [DATA_WIDTH - 1:0] s_axis_tdata,\n')
        fh.write('    input s_axis_tlast,\n')
        fh.write('    output s_axis_tready,\n')
        fh.write('\n')
        fh.write('    input [FFT_SIZE_WIDTH - 1:0] fft_size,\n')
        fh.write('    input [FFT_SIZE_WIDTH - 2:0] phase,\n')
        fh.write('    output [FFT_SIZE_WIDTH - 2:0] phase_out,\n')
        fh.write('\n')
        fh.write('    output m_axis_tvalid,\n')
        fh.write('    output [DATA_WIDTH - 1:0] m_axis_tdata,\n')
        fh.write('    output m_axis_tlast,\n')
        fh.write('    input m_axis_tready\n')
        fh.write(');\n')
        fh.write('\n')
        fh.write('\n')
        fh.write('localparam ADDR_WIDTH = FFT_SIZE_WIDTH - 1;\n')
        fh.write('localparam ADDR_MSB = ADDR_WIDTH - 1;\n')
        fh.write('\n')
        fh.write('reg we0, next_we0;\n')
        fh.write('reg we1, next_we1;\n')
        fh.write('\n')
        fh.write('reg full0, next_full0;\n')
        fh.write('reg full1, next_full1;\n')
        fh.write('\n')
        fh.write('reg [ADDR_MSB:0] wr_half;\n')
        fh.write('reg [ADDR_WIDTH:0] wr_full;\n')
        fh.write('\n')
        fh.write('reg [ADDR_MSB:0] wr_full_slice, wr_full_m1;\n')
        fh.write('reg [ADDR_MSB:0] wr_ptr0, next_wr_ptr0;\n')
        fh.write('reg [ADDR_MSB:0] wr_ptr1, next_wr_ptr1;\n')
        fh.write('reg [ADDR_MSB:0] rd_ptr0, next_rd_ptr0;\n')
        fh.write('reg [ADDR_MSB:0] rd_ptr1, next_rd_ptr1;\n')
        fh.write('\n')
        fh.write('reg [ADDR_MSB:0] rd_ptr0_d0, rd_ptr0_d1, rd_ptr0_d2;\n')
        fh.write('reg [ADDR_MSB:0] rd_ptr1_d0, rd_ptr1_d1, rd_ptr1_d2;\n')
        fh.write('\n')
        fh.write('wire [ADDR_MSB:0] rd_addr0, rd_addr1;\n')
        fh.write('wire [ADDR_MSB:0] wr_addr0, wr_addr1;\n')
        fh.write('\n')
        fh.write('reg rd_side, next_rd_side;\n')
        fh.write('reg wr_side, next_wr_side;\n')
        fh.write('\n')
        fh.write('reg rd_en, next_rd_en;\n')
        fh.write('wire [DATA_WIDTH - 1:0] rd_data0, rd_data1;\n')
        fh.write('reg [DATA_WIDTH - 1:0] wr_data, next_wr_data;\n')
        fh.write('\n')
        fh.write('wire [ADDR_MSB:0] phase_s;\n')
        fh.write('\n')
        fh.write('reg [2:0] rd_side_d;\n')
        fh.write('reg [2:0] rd_en_d;\n')
        fh.write('reg [2:0] rd_tlast_d;\n')
        fh.write('reg rd_tlast, next_rd_tlast;\n')
        fh.write('\n')
        fh.write('reg tvalid_fifo, next_tvalid_fifo;\n')
        fh.write('reg [DATA_WIDTH + ADDR_MSB:0] tdata_fifo, next_tdata_fifo;\n')
        fh.write('wire [DATA_WIDTH + ADDR_MSB:0] m_axis_tdata_s;\n')
        fh.write('wire [DATA_WIDTH + ADDR_MSB:0] tdata0, tdata1;\n')
        fh.write('reg tlast_fifo, next_tlast_fifo;\n')
        fh.write('\n')
        fh.write('wire almost_full;\n')
        fh.write('wire take_data;\n')
        fh.write('\n')
        fh.write('localparam S_IDLE = 0, S_READ0 = 1, S_READ1 = 2;\n')
        fh.write('reg [1:0] state, next_state;\n')
        fh.write('\n')
        fh.write('assign wr_addr0 = wr_ptr0;\n')
        fh.write('assign wr_addr1 = wr_ptr1;\n')
        fh.write('\n')
        fh.write('assign rd_addr0 = rd_ptr0;\n')
        fh.write('assign rd_addr1 = rd_ptr1;\n')
        fh.write('assign phase_s = phase;\n')
        fh.write('\n')
        fh.write('assign take_data = (s_axis_tvalid == 1\'b1 && almost_full == 1\'b0) ? 1\'b1 : 1\'b0;\n')
        fh.write('\n')
        fh.write('assign tdata0 = {{rd_ptr0_d2,rd_data0}};\n')
        fh.write('assign tdata1 = {{rd_ptr1_d2,rd_data1}};\n')
        fh.write('\n')
        fh.write('assign m_axis_tdata = m_axis_tdata_s[DATA_WIDTH - 1:0];\n')
        fh.write('assign phase_out = m_axis_tdata_s[(DATA_WIDTH + ADDR_MSB):DATA_WIDTH];\n')
        fh.write('\n')
        fh.write('assign s_axis_tready = ~almost_full;\n')
        fh.write('\n')
        fh.write('// main clock process\n')
        fh.write('always @(posedge clk, posedge sync_reset)\n')
        fh.write('begin\n')
        fh.write('    if (sync_reset == 1\'b1) begin\n')
        fh.write('        rd_side <= 1\'b1;\n')
        fh.write('        wr_ptr0 <= 0;\n')
        fh.write('        wr_ptr1 <= 0;\n')
        fh.write('        wr_side <= 1\'b0;\n')
        fh.write('        rd_ptr0 <= 0;\n')
        fh.write('        rd_ptr1 <= 0;\n')
        fh.write('        full0 <= 1\'b0;\n')
        fh.write('        full1 <= 1\'b0;\n')
        fh.write('        state <= S_IDLE;\n')
        fh.write('    end else begin\n')
        fh.write('        rd_side <= next_rd_side;\n')
        fh.write('        wr_ptr0 <= next_wr_ptr0;\n')
        fh.write('        wr_ptr1 <= next_wr_ptr1;\n')
        fh.write('        wr_side <= next_wr_side;\n')
        fh.write('        rd_ptr0 <= next_rd_ptr0;\n')
        fh.write('        rd_ptr1 <= next_rd_ptr1;\n')
        fh.write('        full0 <= next_full0;\n')
        fh.write('        full1 <= next_full1;\n')
        fh.write('        state <= next_state;\n')
        fh.write('    end\n')
        fh.write('end\n')
        fh.write('\n')
        fh.write('//delay process\n')
        fh.write('always @(posedge clk)\n')
        fh.write('begin\n')
        fh.write('    we0 <= next_we0;\n')
        fh.write('    we1 <= next_we1;\n')
        fh.write('    wr_half <= fft_size[FFT_SIZE_WIDTH-1:1];\n')
        fh.write('    wr_full <= fft_size - 1;\n')
        fh.write('    wr_full_slice <= wr_full[ADDR_MSB:0];\n')
        fh.write('    wr_full_m1 <= wr_full_slice - 1;\n')
        fh.write('    wr_data <= next_wr_data;\n')
        fh.write('    rd_tlast <= next_rd_tlast;\n')
        fh.write('    rd_en <= next_rd_en;\n')
        fh.write('    tvalid_fifo <= next_tvalid_fifo;\n')
        fh.write('    tdata_fifo <= next_tdata_fifo;\n')
        fh.write('    tlast_fifo <= next_tlast_fifo;\n')
        fh.write('    rd_en <= next_rd_en;\n')
        fh.write('    rd_en_d <= {{rd_en_d[1:0],rd_en}};\n')
        fh.write('    rd_side_d <= {{rd_side_d[1:0],rd_side}};\n')
        fh.write('    rd_tlast_d <= {{rd_tlast_d[1:0],rd_tlast}};\n')
        fh.write('\n')
        fh.write('    rd_ptr0_d0 <= rd_ptr0;\n')
        fh.write('    rd_ptr0_d1 <= rd_ptr0_d0;\n')
        fh.write('    rd_ptr0_d2 <= rd_ptr0_d1;\n')
        fh.write('\n')
        fh.write('    rd_ptr1_d0 <= rd_ptr1;\n')
        fh.write('    rd_ptr1_d1 <= rd_ptr1_d0;\n')
        fh.write('    rd_ptr1_d2 <= rd_ptr1_d1;\n')
        fh.write('end\n')
        fh.write('\n')
        fh.write('// full signal process\n')
        fh.write('always @*\n')
        fh.write('begin\n')
        fh.write('    next_full0 = full0;\n')
        fh.write('    next_full1 = full1;\n')
        fh.write('    if (full0 == 1\'b0) begin\n')
        fh.write('        if (take_data == 1\'b1 && wr_side == 1\'b0 && (phase_s == wr_full_slice || s_axis_tlast == 1\'b1)) begin\n')
        fh.write('            next_full0 = 1\'b1;\n')
        fh.write('        end\n')
        fh.write('    end else begin\n')
        fh.write('        if (state == S_READ0 && almost_full == 1\'b0 && rd_ptr0 == wr_full_m1) begin\n')
        fh.write('            next_full0 = 1\'b0;\n')
        fh.write('        end\n')
        fh.write('    end\n')
        fh.write('    if (full1 == 1\'b0) begin\n')
        fh.write('        if (take_data == 1\'b1 && wr_side == 1\'b1 && (phase_s == wr_full_slice || s_axis_tlast == 1\'b1)) begin\n')
        fh.write('            next_full1 = 1\'b1;\n')
        fh.write('        end\n')
        fh.write('    end else begin\n')
        fh.write('        if (state == S_READ1 && almost_full == 1\'b0 && rd_ptr1 == wr_full_m1) begin\n')
        fh.write('            next_full1 = 1\'b0;\n')
        fh.write('        end\n')
        fh.write('    end\n')
        fh.write('end\n')
        fh.write('\n')
        fh.write('// write process\n')
        fh.write('always @*\n')
        fh.write('begin\n')
        fh.write('    next_we0 = 1\'b0;\n')
        fh.write('    next_we1 = 1\'b0;\n')
        fh.write('    next_wr_data = 0;\n')
        fh.write('    next_wr_ptr0 = wr_ptr0;\n')
        fh.write('    next_wr_ptr1 = wr_ptr1;\n')
        fh.write('    next_wr_side = wr_side;\n')
        fh.write('    if (s_axis_tvalid == 1\'b1 && almost_full == 1\'b0) begin\n')
        fh.write('        next_wr_data = s_axis_tdata;\n')
        fh.write('        if (wr_side == 1\'b0) begin\n')
        fh.write('            if (full0 == 1\'b0) begin\n')
        fh.write('                next_we0 = 1\'b1;\n')
        fh.write('                next_wr_ptr0 <= phase_s;\n')
        fh.write('                if (phase_s == wr_full_slice) begin\n')
        fh.write('                    next_wr_side = 1\'b1;\n')
        fh.write('                end\n')
        fh.write('            end\n')
        fh.write('        end else begin\n')
        fh.write('            if (full1 == 1\'b0) begin\n')
        fh.write('                next_we1 = 1\'b1;\n')
        fh.write('                next_wr_ptr1 = (phase_s + wr_half) & wr_full_slice;\n')
        fh.write('                if (phase_s == wr_full_slice) begin\n')
        fh.write('                    next_wr_side = 1\'b0;\n')
        fh.write('                end\n')
        fh.write('            end\n')
        fh.write('        end\n')
        fh.write('    end\n')
        fh.write('end\n')
        fh.write('\n')
        fh.write('\n')
        fh.write('// read state machine\n')
        fh.write('always @*\n')
        fh.write('begin\n')
        fh.write('    next_rd_ptr0 = rd_ptr0;\n')
        fh.write('    next_rd_ptr1 = rd_ptr1;\n')
        fh.write('    next_rd_side = rd_side;\n')
        fh.write('    next_state = state;\n')
        fh.write('    next_rd_en = 1\'b0;\n')
        fh.write('    next_rd_tlast = 1\'b0;\n')
        fh.write('    case(state)\n')
        fh.write('        S_IDLE :\n')
        fh.write('        begin\n')
        fh.write('            if (rd_side == 1\'b1 && full0 == 1\'b1 && almost_full == 1\'b0) begin\n')
        fh.write('                next_rd_side = 1\'b0;\n')
        fh.write('                next_rd_en = 1\'b1;\n')
        fh.write('                next_rd_ptr0 = 0;\n')
        fh.write('                next_state = S_READ0;\n')
        fh.write('            end else if (rd_side == 1\'b0 && full1 == 1\'b1 && almost_full == 1\'b0) begin\n')
        fh.write('                next_rd_side = 1\'b1;\n')
        fh.write('                next_rd_en = 1\'b1;\n')
        fh.write('                next_rd_ptr1 = 0;\n')
        fh.write('                next_state = S_READ1;\n')
        fh.write('            end\n')
        fh.write('        end\n')
        fh.write('        S_READ0 :\n')
        fh.write('        begin\n')
        fh.write('            if (almost_full == 1\'b0) begin\n')
        fh.write('                next_rd_en = 1\'b1;\n')
        fh.write('                next_rd_ptr0 = rd_ptr0 + 1;\n')
        fh.write('                if (rd_ptr0 == (wr_full_m1)) begin\n')
        fh.write('                    next_state = S_IDLE;\n')
        fh.write('                    next_rd_tlast = 1\'b1;\n')
        fh.write('                end\n')
        fh.write('            end\n')
        fh.write('        end\n')
        fh.write('        S_READ1 :\n')
        fh.write('        begin\n')
        fh.write('            if (almost_full == 1\'b0) begin\n')
        fh.write('                next_rd_en = 1\'b1;\n')
        fh.write('                next_rd_ptr1 = rd_ptr1 + 1;\n')
        fh.write('                if (rd_ptr1 == wr_full_m1) begin\n')
        fh.write('                    next_state = S_IDLE;\n')
        fh.write('                    next_rd_tlast = 1\'b1;\n')
        fh.write('                end\n')
        fh.write('            end\n')
        fh.write('        end\n')
        fh.write('        default :\n')
        fh.write('        begin\n')
        fh.write('        end\n')
        fh.write('    endcase\n')
        fh.write('end\n')
        fh.write('\n')
        fh.write('//mux process\n')
        fh.write('always @*\n')
        fh.write('begin\n')
        fh.write('    next_tvalid_fifo = 1\'b0;\n')
        fh.write('    next_tlast_fifo = 1\'b0;\n')
        fh.write('    next_tdata_fifo = 0;\n')
        fh.write('    if (rd_en_d[2] == 1\'b1) begin\n')
        fh.write('        next_tvalid_fifo = 1\'b1;\n')
        fh.write('        next_tlast_fifo = rd_tlast_d[2];\n')
        fh.write('        if (rd_side_d[2] == 1\'b0) begin\n')
        fh.write('            next_tdata_fifo = tdata0;\n')
        fh.write('        end else begin\n')
        fh.write('            next_tdata_fifo = tdata1;\n')
        fh.write('        end\n')
        fh.write('    end\n')
        fh.write('end\n')
        fh.write('\n')
        fh.write('dp_block_read_first_ram #(\n')
        fh.write('    .DATA_WIDTH(DATA_WIDTH),\n')
        fh.write('    .ADDR_WIDTH(ADDR_WIDTH))\n')
        fh.write('u_ram0(\n')
        fh.write('    .clk(clk),\n')
        fh.write('    .wea(we0),\n')
        fh.write('    .addra(wr_addr0),\n')
        fh.write('    .addrb(rd_addr0),\n')
        fh.write('    .dia(wr_data),\n')
        fh.write('    .dob(rd_data0)\n')
        fh.write(');\n')
        fh.write('\n')
        fh.write('dp_block_read_first_ram #(\n')
        fh.write('    .DATA_WIDTH(DATA_WIDTH),\n')
        fh.write('    .ADDR_WIDTH(ADDR_WIDTH))\n')
        fh.write('u_ram1(\n')
        fh.write('    .clk(clk),\n')
        fh.write('    .wea(we1),\n')
        fh.write('    .addra(wr_addr1),\n')
        fh.write('    .addrb(rd_addr1),\n')
        fh.write('    .dia(wr_data),\n')
        fh.write('    .dob(rd_data1)\n')
        fh.write(');\n')
        fh.write('\n')
        fh.write('axi_fifo_19 #(\n')
        fh.write('    .DATA_WIDTH(DATA_WIDTH + ADDR_WIDTH),\n')
        fh.write('    .ALMOST_FULL_THRESH(8),\n')
        fh.write('    .ADDR_WIDTH(4))\n')
        fh.write('out_fifo(\n')
        fh.write('    .clk(clk),\n')
        fh.write('    .sync_reset(sync_reset),\n')
        fh.write('    .s_axis_tvalid(tvalid_fifo),\n')
        fh.write('    .s_axis_tdata(tdata_fifo),\n')
        fh.write('    .s_axis_tlast(tlast_fifo),\n')
        fh.write('    .s_axis_tready(),\n')
        fh.write('    .almost_full(almost_full),\n')
        fh.write('    .m_axis_tvalid(m_axis_tvalid),\n')
        fh.write('    .m_axis_tdata(m_axis_tdata_s),\n')
        fh.write('    .m_axis_tlast(m_axis_tlast),\n')
        fh.write('    .m_axis_tready(m_axis_tready)\n')
        fh.write(');\n')
        fh.write('\n')
        fh.write('\n')
        fh.write('endmodule\n')



def gen_inbuff_logic(path):
    assert(path is not None), 'User must specify Path'
    path = ret_valid_path(path)
    mod_name = 'input_buffer.v'
    file_name = os.path.join(path, mod_name)
    with open(file_name, 'w') as fh:
        fh.write('//***************************************************************************--\n')
        fh.write('//\n')
        fh.write('// Author : PJV\n')
        fh.write('// File : input_buffer\n')
        fh.write('// Description : Input buffer to the M/2 Polyphase Channelizer bank.\n')
        fh.write('//      Can be any power of 2 less than that.\n')
        fh.write('//\n')
        fh.write('//***************************************************************************--\n')
        fh.write('module input_buffer#(\n')
        fh.write('    parameter DATA_WIDTH = 32,\n')
        fh.write('    parameter FFT_SIZE_WIDTH = 12)\n')
        fh.write('(\n')
        fh.write('    input clk,\n')
        fh.write('    input sync_reset,\n')
        fh.write('    input s_axis_tvalid,\n')
        fh.write('    input [DATA_WIDTH - 1:0] s_axis_tdata,\n')
        fh.write('    output s_axis_tready,\n')
        fh.write('    input [FFT_SIZE_WIDTH - 1:0] fft_size,\n')
        fh.write('    output m_axis_tvalid,\n')
        fh.write('    output [DATA_WIDTH - 1:0] m_axis_tdata,\n')
        fh.write('    output m_axis_final_cnt,\n')
        fh.write('    output [FFT_SIZE_WIDTH - 2:0] phase,\n')
        fh.write('    input m_axis_tready\n')
        fh.write(');\n')
        fh.write('\n')
        fh.write('localparam ADDR_WIDTH = FFT_SIZE_WIDTH - 2;\n')
        fh.write('localparam ADDR_MSB = ADDR_WIDTH - 1;\n')
        fh.write('localparam PAD_IN_BITS = 16 - ADDR_WIDTH;\n')
        fh.write('localparam PAD_OUT_BITS = 15 - ADDR_WIDTH;\n')
        fh.write('\n')
        fh.write('wire [PAD_IN_BITS-1:0] PAD_IN = {{PAD_IN_BITS{{1\'b0}}}};\n')
        fh.write('wire [PAD_OUT_BITS-1:0] PAD_OUT = {{PAD_OUT_BITS{{1\'b0}}}};\n')
        fh.write('\n')
        fh.write('// input count signals.\n')
        fh.write('wire [15:0] cnt_limit_in;\n')
        fh.write('wire [15:0] cnt_limit_out;\n')
        fh.write('wire count_tvalid;\n')
        fh.write('wire [DATA_WIDTH - 1:0] count_tdata;\n')
        fh.write('wire final_cnt;\n')
        fh.write('wire [15:0] count;\n')
        fh.write('reg count_tready;\n')
        fh.write('wire [ADDR_MSB:0] roll_over;\n')
        fh.write('wire [ADDR_MSB:0] roll_over_m1;\n')
        fh.write('reg [ADDR_WIDTH:0] roll_over_s;  // Ping Pong RAM signals.\n')
        fh.write('\n')
        fh.write('reg sec_pass0, next_sec_pass0;\n')
        fh.write('reg sec_pass1, next_sec_pass1;\n')
        fh.write('\n')
        fh.write('wire [ADDR_WIDTH - 1:0] wr_addr0, wr_addr1;\n')
        fh.write('wire [ADDR_WIDTH - 1:0] rd_addr0, rd_addr1;\n')
        fh.write('\n')
        fh.write('reg [ADDR_WIDTH:0] wr_ptr0, next_wr_ptr0;\n')
        fh.write('reg [ADDR_WIDTH:0] wr_ptr0_inv, next_wr_ptr0_inv;\n')
        fh.write('reg [ADDR_WIDTH:0] wr_ptr1_inv, next_wr_ptr1_inv;\n')
        fh.write('reg [ADDR_WIDTH:0] wr_ptr1, next_wr_ptr1;\n')
        fh.write('reg [ADDR_WIDTH:0] rd_ptr0, next_rd_ptr0;\n')
        fh.write('reg [ADDR_WIDTH:0] rd_ptr1, next_rd_ptr1;\n')
        fh.write('\n')
        fh.write('reg [DATA_WIDTH - 1:0] wr_data, next_wr_data;\n')
        fh.write('reg wr_side, next_wr_side;\n')
        fh.write('reg rd_side, next_rd_side;\n')
        fh.write('wire [DATA_WIDTH - 1:0] rd_data0, rd_data1;\n')
        fh.write('reg rd_en, next_rd_en;\n')
        fh.write('reg we0, next_we0;\n')
        fh.write('reg we1, next_we1;\n')
        fh.write('wire full0, full1;  // read state type\n')
        fh.write('\n')
        fh.write('localparam S_IDLE=0, S_READ0=1, S_READ1=2;\n')
        fh.write('reg [1:0] state, next_state;\n')
        fh.write('\n')
        fh.write('reg start_sig, next_start_sig;  // start count\n')
        fh.write('// delay signals to offset for 3 cycle latency through the RAMs.\n')
        fh.write('reg [2:0] rd_en_d, rd_side_d, start_sig_d;  // signal rd_mux, next_rd_mux : std_logic;\n')
        fh.write('reg [DATA_WIDTH - 1:0] rd_tdata, next_rd_tdata;\n')
        fh.write('reg rd_tvalid, next_rd_tvalid;\n')
        fh.write('reg rd_start, next_rd_start;\n')
        fh.write('wire rd_tready;\n')
        fh.write('wire almost_full;\n')
        fh.write('reg rd0_finish, next_rd0_finish, rd1_finish, next_rd1_finish;\n')
        fh.write('\n')
        fh.write('wire [15:0] phase_s;\n')
        fh.write('wire write0, write1;\n')
        fh.write('\n')
        fh.write('assign rd_tready = ~almost_full;\n')
        fh.write('assign roll_over = roll_over_s[ADDR_MSB:0];\n')
        fh.write('assign roll_over_m1 = {{roll_over_s[ADDR_MSB:1],1\'b0}};\n')
        fh.write('assign cnt_limit_in = {{PAD_IN,roll_over}};\n')
        fh.write('assign cnt_limit_out = {{PAD_OUT,roll_over,1\'b1}};\n')
        fh.write(
            'assign full0 = (wr_ptr0_inv[ADDR_WIDTH] != rd_ptr0[ADDR_WIDTH] && rd0_finish == 1\'b0) ? 1\'b1 : 1\'b0;\n')
        fh.write(
            'assign full1 = (wr_ptr1_inv[ADDR_WIDTH] != rd_ptr1[ADDR_WIDTH] && rd1_finish == 1\'b0) ? 1\'b1 : 1\'b0;\n')
        fh.write('assign phase = phase_s[ADDR_WIDTH:0];\n')
        fh.write('assign wr_addr0 = wr_ptr0[ADDR_MSB:0];\n')
        fh.write('assign wr_addr1 = wr_ptr1[ADDR_MSB:0];\n')
        fh.write('assign rd_addr0 = rd_ptr0[ADDR_MSB:0];\n')
        fh.write('assign rd_addr1 = rd_ptr1[ADDR_MSB:0];\n')
        fh.write('assign write0 = (wr_side == 1\'b0 && count_tready == 1\'b1 && count_tvalid == 1\'b1) ? 1\'b1 : 1\'b0;\n')
        fh.write('assign write1 = (wr_side == 1\'b1 && count_tready == 1\'b1 && count_tvalid == 1\'b1) ? 1\'b1 : 1\'b0;\n')
        fh.write('\n')
        fh.write('// main clock process\n')
        fh.write('always @(posedge clk, posedge sync_reset) begin\n')
        fh.write('    if (sync_reset == 1\'b1) begin\n')
        fh.write('        sec_pass0 <= 1\'b0;\n')
        fh.write('        sec_pass1 <= 1\'b0;\n')
        fh.write('        wr_ptr0 <= 0;\n')
        fh.write('        wr_ptr1 <= 0;\n')
        fh.write('        wr_ptr0_inv <= 0;\n')
        fh.write('        wr_ptr1_inv <= 0;\n')
        fh.write('        wr_side <= 1\'b0;\n')
        fh.write('        rd_ptr0 <= 0;\n')
        fh.write('        rd_ptr1 <= 0;\n')
        fh.write('        state <= S_IDLE;\n')
        fh.write('        start_sig <= 1\'b0;\n')
        fh.write('        rd_tdata <= 0;\n')
        fh.write('        rd_en <= 1\'b0;\n')
        fh.write('        rd_side <= 1\'b1;\n')
        fh.write('        rd_tvalid <= 1\'b0;\n')
        fh.write('        rd_start <= 1\'b0;\n')
        fh.write('        rd0_finish <= 1\'b0;\n')
        fh.write('        rd1_finish <= 1\'b0;\n')
        fh.write('    end else begin\n')
        fh.write('        sec_pass0 <= next_sec_pass0;\n')
        fh.write('        sec_pass1 <= next_sec_pass1;\n')
        fh.write('        wr_ptr0 <= next_wr_ptr0;\n')
        fh.write('        wr_ptr1 <= next_wr_ptr1;\n')
        fh.write('        wr_ptr0_inv <= next_wr_ptr0_inv;\n')
        fh.write('        wr_ptr1_inv <= next_wr_ptr1_inv;\n')
        fh.write('        wr_side <= next_wr_side;\n')
        fh.write('        rd_ptr0 <= next_rd_ptr0;\n')
        fh.write('        rd_ptr1 <= next_rd_ptr1;\n')
        fh.write('        state <= next_state;\n')
        fh.write('        start_sig <= next_start_sig;\n')
        fh.write('        rd_en <= next_rd_en;\n')
        fh.write('        rd_side <= next_rd_side;\n')
        fh.write('        rd_tdata <= next_rd_tdata;\n')
        fh.write('        rd_tvalid <= next_rd_tvalid;\n')
        fh.write('        rd_start <= next_rd_start;\n')
        fh.write('        rd0_finish <= next_rd0_finish;\n')
        fh.write('        rd1_finish <= next_rd1_finish;\n')
        fh.write('    end\n')
        fh.write('end\n')
        fh.write('\n')
        fh.write('always @(posedge clk) begin\n')
        fh.write('    we0 <= next_we0;\n')
        fh.write('    we1 <= next_we1;\n')
        fh.write('    wr_data <= next_wr_data;\n')
        fh.write('    rd_en_d <= {{rd_en_d[1:0], rd_en}};\n')
        fh.write('    rd_side_d <= {{rd_side_d[1:0], rd_side}};\n')
        fh.write('    start_sig_d <= {{start_sig_d[1:0], start_sig}};\n')
        fh.write('    roll_over_s <= fft_size[FFT_SIZE_WIDTH - 1:1] - 1;\n')
        fh.write('end\n')
        fh.write('\n')
        fh.write('always @*\n')
        fh.write('begin\n')
        fh.write('    count_tready = 1\'b0;\n')
        fh.write('    next_we0 = 1\'b0;\n')
        fh.write('    next_we1 = 1\'b0;\n')
        fh.write('    next_wr_data = {{(((DATA_WIDTH - 1))-((0))+1){{1\'b0}}}};\n')
        fh.write('    next_wr_ptr0 = wr_ptr0;\n')
        fh.write('    next_wr_ptr1 = wr_ptr1;\n')
        fh.write('    next_wr_ptr0_inv = wr_ptr0_inv;\n')
        fh.write('    next_wr_ptr1_inv = wr_ptr1_inv;\n')
        fh.write('    next_wr_side = wr_side;\n')
        fh.write('    if (count_tvalid == 1\'b1) begin\n')
        fh.write('        if (wr_side == 1\'b0) begin\n')
        fh.write('            if (full0 == 1\'b0) begin\n')
        fh.write('                next_we0 = 1\'b1;\n')
        fh.write('                count_tready = 1\'b1;\n')
        fh.write('                next_wr_data = count_tdata;\n')
        fh.write('                if (final_cnt == 1\'b1) begin\n')
        fh.write('                    next_wr_ptr0 = {{1\'b1,count[ADDR_MSB:0]}};\n')
        fh.write('                    next_wr_ptr0_inv = {{1\'b1,roll_over & ( ~count[ADDR_MSB:0])}};\n')
        fh.write('                    next_wr_side = 1\'b1;\n')
        fh.write('                end else begin\n')
        fh.write('                    next_wr_ptr0 = {{1\'b0,count[ADDR_MSB:0]}};\n')
        fh.write('                    next_wr_ptr0_inv = {{1\'b0,roll_over & ( ~count[ADDR_MSB:0])}};\n')
        fh.write('                end\n')
        fh.write('            end\n')
        fh.write('        end else begin\n')
        fh.write('            if (full1 == 1\'b0) begin\n')
        fh.write('                next_we1 = 1\'b1;\n')
        fh.write('                count_tready = 1\'b1;\n')
        fh.write('                next_wr_data = count_tdata;\n')
        fh.write('                if (final_cnt == 1\'b1) begin\n')
        fh.write('                    next_wr_ptr1 = {{1\'b1,count[ADDR_MSB:0]}};\n')
        fh.write('                    next_wr_ptr1_inv = {{1\'b1,roll_over & ( ~count[ADDR_MSB:0])}};\n')
        fh.write('                    next_wr_side = 1\'b0;\n')
        fh.write('                end else begin\n')
        fh.write('                    next_wr_ptr1 = {{1\'b0, count[ADDR_MSB:0]}};\n')
        fh.write('                    next_wr_ptr1_inv = {{1\'b0, roll_over & ( ~count[ADDR_MSB:0])}};\n')
        fh.write('                end\n')
        fh.write('            end\n')
        fh.write('        end\n')
        fh.write('    end\n')
        fh.write('end\n')
        fh.write('\n')
        fh.write('always @*\n')
        fh.write('begin\n')
        fh.write('    next_rd_ptr0 = rd_ptr0;\n')
        fh.write('    next_rd_ptr1 = rd_ptr1;\n')
        fh.write('    next_rd_side = rd_side;\n')
        fh.write('    next_sec_pass0 = sec_pass0;\n')
        fh.write('    next_sec_pass1 = sec_pass1;\n')
        fh.write('    next_rd0_finish = rd0_finish;\n')
        fh.write('    next_rd1_finish = rd1_finish;\n')
        fh.write('    next_state = state;\n')
        fh.write('    next_rd_en = 1\'b0;\n')
        fh.write('    next_start_sig = 1\'b0;\n')
        fh.write('    case(state)\n')
        fh.write('        S_IDLE :\n')
        fh.write('        begin\n')
        fh.write('            if (rd_side == 1\'b1 && full0 == 1\'b1 && rd_tready == 1\'b1) begin\n')
        fh.write('                next_rd_side = 1\'b0;\n')
        fh.write('                next_rd_en = 1\'b1;\n')
        fh.write('                next_rd_ptr0 = 0;\n')
        fh.write('                next_rd_ptr1 = 0;\n')
        fh.write('                next_state = S_READ0;\n')
        fh.write('                next_sec_pass0 = 1\'b0;\n')
        fh.write('                next_start_sig = 1\'b1;\n')
        fh.write('            end else if (rd_side == 1\'b0 && full1 == 1\'b1 && rd_tready == 1\'b1) begin\n')
        fh.write('                next_rd_side = 1\'b1;\n')
        fh.write('                next_rd_en = 1\'b1;\n')
        fh.write('                next_rd_ptr1 = 0;\n')
        fh.write('                next_rd_ptr0 = 0;\n')
        fh.write('                next_state = S_READ1;\n')
        fh.write('                next_sec_pass1 = 1\'b0;\n')
        fh.write('                next_start_sig = 1\'b1;\n')
        fh.write('            end\n')
        fh.write('            if (write0 == 1\'b1) begin\n')
        fh.write('                next_rd0_finish = 1\'b0;\n')
        fh.write('            end\n')
        fh.write('            if (write1 == 1\'b1) begin\n')
        fh.write('                next_rd1_finish = 1\'b0;\n')
        fh.write('            end\n')
        fh.write('        end\n')
        fh.write('        S_READ0 :\n')
        fh.write('        begin\n')
        fh.write('            if (write1 == 1\'b1) begin\n')
        fh.write('                next_rd1_finish = 1\'b0;\n')
        fh.write('            end\n')
        fh.write('            if (rd_tready == 1\'b1) begin\n')
        fh.write('                next_rd_en = 1\'b1;\n')
        fh.write('                if (rd_ptr0 == (roll_over_s)) begin\n')
        fh.write('                    next_rd_ptr0 = 0;\n')
        fh.write('                end else begin\n')
        fh.write('                    next_rd_ptr0 = rd_ptr0 + 1;\n')
        fh.write('                end\n')
        fh.write('                if (rd_ptr0 == (roll_over_m1)) begin\n')
        fh.write('                    if (sec_pass0 == 1\'b1) begin\n')
        fh.write('                        next_state = S_IDLE;\n')
        fh.write('                        next_sec_pass0 = 1\'b0;\n')
        fh.write('                        next_rd0_finish = 1\'b1;\n')
        fh.write('                    end else begin\n')
        fh.write('                        next_sec_pass0 = 1\'b1;\n')
        fh.write('                    end\n')
        fh.write('                end\n')
        fh.write('            end\n')
        fh.write('        end\n')
        fh.write('        S_READ1 :\n')
        fh.write('        begin\n')
        fh.write('            if (write0 == 1\'b1) begin\n')
        fh.write('                next_rd0_finish <= 1\'b0;\n')
        fh.write('            end\n')
        fh.write('            if (rd_tready == 1\'b1) begin\n')
        fh.write('                next_rd_en = 1\'b1;\n')
        fh.write('                if (rd_ptr1 == (roll_over_s)) begin\n')
        fh.write('                    next_rd_ptr1 = 0;\n')
        fh.write('                end else begin\n')
        fh.write('                    next_rd_ptr1 = rd_ptr1 + 1;\n')
        fh.write('                end\n')
        fh.write('                if (rd_ptr1 == (roll_over_m1)) begin\n')
        fh.write('                    if (sec_pass1 == 1\'b1) begin\n')
        fh.write('                        next_state = S_IDLE;\n')
        fh.write('                        next_sec_pass1 = 1\'b0;\n')
        fh.write('                        next_rd1_finish = 1\'b1;\n')
        fh.write('                    end else begin\n')
        fh.write('                        next_sec_pass1 = 1\'b1;\n')
        fh.write('                    end\n')
        fh.write('                end\n')
        fh.write('            end\n')
        fh.write('        end\n')
        fh.write('        default :\n')
        fh.write('        begin\n')
        fh.write('        end\n')
        fh.write('    endcase\n')
        fh.write('end\n')
        fh.write('\n')
        fh.write('always @*\n')
        fh.write('begin\n')
        fh.write('    next_rd_tvalid = 1\'b0;\n')
        fh.write('    next_rd_start = 1\'b0;\n')
        fh.write('    next_rd_tdata = rd_tdata;\n')
        fh.write('    if (rd_en_d[2] == 1\'b1) begin\n')
        fh.write('        next_rd_start = start_sig_d[2];\n')
        fh.write('        next_rd_tvalid = 1\'b1;\n')
        fh.write('        if (rd_side_d[2] == 1\'b0) begin\n')
        fh.write('            next_rd_tdata = rd_data0;\n')
        fh.write('        end else begin\n')
        fh.write('            next_rd_tdata = rd_data1;\n')
        fh.write('        end\n')
        fh.write('    end\n')
        fh.write('end\n')
        fh.write('\n')
        fh.write('count_cycle_cw16_8 #(\n')
        fh.write('    .DATA_WIDTH(DATA_WIDTH))\n')
        fh.write('u_in_count(\n')
        fh.write('    .clk(clk),\n')
        fh.write('    .sync_reset(sync_reset),\n')
        fh.write('    .s_axis_tvalid(s_axis_tvalid),\n')
        fh.write('    .s_axis_tdata(s_axis_tdata),\n')
        fh.write('    .cnt_limit(cnt_limit_in),\n')
        fh.write('    .s_axis_tready(s_axis_tready),\n')
        fh.write('    .m_axis_tvalid(count_tvalid),\n')
        fh.write('    .m_axis_tdata(count_tdata),\n')
        fh.write('    .m_axis_final_cnt(final_cnt),\n')
        fh.write('    .count(count),\n')
        fh.write('    .m_axis_tready(count_tready)\n')
        fh.write(');\n')
        fh.write('\n')
        fh.write('// latency = 3\n')
        fh.write('dp_block_read_first_ram #(\n')
        fh.write('    .DATA_WIDTH(DATA_WIDTH),\n')
        fh.write('    .ADDR_WIDTH(ADDR_WIDTH))\n')
        fh.write('u_ram_0(\n')
        fh.write('    .clk(clk),\n')
        fh.write('    .wea(we0),\n')
        fh.write('    .addra(wr_addr0),\n')
        fh.write('    .addrb(rd_addr0),\n')
        fh.write('    .dia(wr_data),\n')
        fh.write('    .dob(rd_data0)\n')
        fh.write(');\n')
        fh.write('\n')
        fh.write('  // latency = 3\n')
        fh.write('dp_block_read_first_ram #(\n')
        fh.write('    .DATA_WIDTH(DATA_WIDTH),\n')
        fh.write('    .ADDR_WIDTH(ADDR_WIDTH))\n')
        fh.write('u_ram_1(\n')
        fh.write('    .clk(clk),\n')
        fh.write('    .wea(we1),\n')
        fh.write('    .addra(wr_addr1),\n')
        fh.write('    .addrb(rd_addr1),\n')
        fh.write('    .dia(wr_data),\n')
        fh.write('    .dob(rd_data1)\n')
        fh.write(');\n')
        fh.write('\n')
        fh.write('count_cycle_cw16_18 #(\n')
        fh.write('    .DATA_WIDTH(32))\n')
        fh.write('u_out_count(\n')
        fh.write('    .clk(clk),\n')
        fh.write('    .sync_reset(sync_reset),\n')
        fh.write('    .s_axis_tvalid(rd_tvalid),\n')
        fh.write('    .s_axis_tdata(rd_tdata),\n')
        fh.write('    .cnt_limit(cnt_limit_out),\n')
        fh.write('    .start_sig(rd_start),\n')
        fh.write('    .s_axis_tready(open),\n')
        fh.write('    .af(almost_full),\n')
        fh.write('    .m_axis_tvalid(m_axis_tvalid),\n')
        fh.write('    .m_axis_tdata(m_axis_tdata),\n')
        fh.write('    .m_axis_final_cnt(m_axis_final_cnt),\n')
        fh.write('    .count(phase_s),\n')
        fh.write('    .m_axis_tready(m_axis_tready)\n')
        fh.write(');\n')
        fh.write('\n')
        fh.write('\n')
        fh.write('endmodule\n')


def gen_inbuff1x_logic(path):
    assert(path is not None), 'User must specify Path'
    path = ret_valid_path(path)
    mod_name = 'input_buffer_1x.v'
    file_name = os.path.join(path, mod_name)
    with open(file_name, 'w') as fh:
        fh.write('//***************************************************************************--\n')
        fh.write('//\n')
        fh.write('// Author : PJV\n')
        fh.write('// File : input_buffer\n')
        fh.write('// Description : Input buffer to the M Polyphase Channelizer bank.\n')
        fh.write('//      Can be any power of 2 less than that.\n')
        fh.write('//\n')
        fh.write('//***************************************************************************--\n')
        fh.write('module input_buffer_1x#(\n')
        fh.write('    parameter DATA_WIDTH = 32,\n')
        fh.write('    parameter FFT_SIZE_WIDTH = 12)\n')
        fh.write('(\n')
        fh.write('    input clk,\n')
        fh.write('    input sync_reset,\n')
        fh.write('    input s_axis_tvalid,\n')
        fh.write('    input [DATA_WIDTH - 1:0] s_axis_tdata,\n')
        fh.write('    output s_axis_tready,\n')
        fh.write('    input [FFT_SIZE_WIDTH - 1:0] fft_size,\n')
        fh.write('    output m_axis_tvalid,\n')
        fh.write('    output [DATA_WIDTH - 1:0] m_axis_tdata,\n')
        fh.write('    output m_axis_final_cnt,\n')
        fh.write('    output [FFT_SIZE_WIDTH - 2:0] phase,\n')
        fh.write('    input m_axis_tready\n')
        fh.write(');\n')
        fh.write('\n')
        fh.write('localparam ADDR_WIDTH = FFT_SIZE_WIDTH - 1;\n')
        fh.write('localparam ADDR_MSB = ADDR_WIDTH - 1;\n')
        fh.write('localparam PAD_BITS = 16 - ADDR_WIDTH;\n')
        fh.write('\n')
        fh.write('wire [PAD_BITS-1:0] PAD = {{PAD_BITS{{1\'b0}}}};\n')
        fh.write('\n')
        fh.write('// input count signals.\n')
        fh.write('wire [15:0] cnt_limit_in;\n')
        fh.write('wire [15:0] cnt_limit_out;\n')
        fh.write('wire count_tvalid;\n')
        fh.write('wire [DATA_WIDTH - 1:0] count_tdata;\n')
        fh.write('wire final_cnt;\n')
        fh.write('wire [15:0] count;\n')
        fh.write('reg count_tready;\n')
        fh.write('wire [ADDR_MSB:0] roll_over;\n')
        fh.write('wire [ADDR_MSB:0] roll_over_m1;\n')
        fh.write('reg [ADDR_WIDTH:0] roll_over_s;  // Ping Pong RAM signals.\n')
        fh.write('reg [FFT_SIZE_WIDTH-1:0] fft_size_m1;\n')
        fh.write('\n')
        fh.write('\n')
        fh.write('wire [ADDR_WIDTH - 1:0] wr_addr0, wr_addr1;\n')
        fh.write('wire [ADDR_WIDTH - 1:0] rd_addr0, rd_addr1;\n')
        fh.write('\n')
        fh.write('reg [ADDR_WIDTH:0] wr_ptr0, next_wr_ptr0;\n')
        fh.write('reg [ADDR_WIDTH:0] wr_ptr0_inv, next_wr_ptr0_inv;\n')
        fh.write('reg [ADDR_WIDTH:0] wr_ptr1_inv, next_wr_ptr1_inv;\n')
        fh.write('reg [ADDR_WIDTH:0] wr_ptr1, next_wr_ptr1;\n')
        fh.write('reg [ADDR_WIDTH:0] rd_ptr0, next_rd_ptr0;\n')
        fh.write('reg [ADDR_WIDTH:0] rd_ptr1, next_rd_ptr1;\n')
        fh.write('\n')
        fh.write('reg [DATA_WIDTH - 1:0] wr_data, next_wr_data;\n')
        fh.write('reg wr_side, next_wr_side;\n')
        fh.write('reg rd_side, next_rd_side;\n')
        fh.write('wire [DATA_WIDTH - 1:0] rd_data0, rd_data1;\n')
        fh.write('reg rd_en, next_rd_en;\n')
        fh.write('reg we0, next_we0;\n')
        fh.write('reg we1, next_we1;\n')
        fh.write('wire full0, full1;  // read state type\n')
        fh.write('\n')
        fh.write('localparam S_IDLE=0, S_READ0=1, S_READ1=2;\n')
        fh.write('reg [1:0] state, next_state;\n')
        fh.write('\n')
        fh.write('reg start_sig, next_start_sig;  // start count\n')
        fh.write('// delay signals to offset for 3 cycle latency through the RAMs.\n')
        fh.write('reg [2:0] rd_en_d, rd_side_d, start_sig_d;  // signal rd_mux, next_rd_mux : std_logic;\n')
        fh.write('reg [DATA_WIDTH - 1:0] rd_tdata, next_rd_tdata;\n')
        fh.write('reg rd_tvalid, next_rd_tvalid;\n')
        fh.write('reg rd_start, next_rd_start;\n')
        fh.write('wire rd_tready;\n')
        fh.write('wire almost_full;\n')
        fh.write('reg rd0_finish, next_rd0_finish, rd1_finish, next_rd1_finish;\n')
        fh.write('\n')
        fh.write('wire [15:0] phase_s;\n')
        fh.write('wire write0, write1;\n')
        fh.write('\n')
        fh.write('assign rd_tready = ~almost_full;\n')
        fh.write('assign roll_over = roll_over_s[ADDR_MSB:0];\n')
        fh.write('assign roll_over_m1 = {{roll_over_s[ADDR_MSB:1],1\'b0}};\n')
        fh.write('assign cnt_limit_in = {{PAD,roll_over}};\n')
        fh.write('assign cnt_limit_out = {{PAD,roll_over}};\n')
        fh.write(
            'assign full0 = (wr_ptr0_inv[ADDR_WIDTH] != rd_ptr0[ADDR_WIDTH] && rd0_finish == 1\'b0) ? 1\'b1 : 1\'b0;\n')
        fh.write(
            'assign full1 = (wr_ptr1_inv[ADDR_WIDTH] != rd_ptr1[ADDR_WIDTH] && rd1_finish == 1\'b0) ? 1\'b1 : 1\'b0;\n')
        fh.write('assign phase = phase_s[ADDR_WIDTH:0];\n')
        fh.write('assign wr_addr0 = wr_ptr0[ADDR_MSB:0];\n')
        fh.write('assign wr_addr1 = wr_ptr1[ADDR_MSB:0];\n')
        fh.write('assign rd_addr0 = rd_ptr0[ADDR_MSB:0];\n')
        fh.write('assign rd_addr1 = rd_ptr1[ADDR_MSB:0];\n')
        fh.write('assign write0 = (wr_side == 1\'b0 && count_tready == 1\'b1 && count_tvalid == 1\'b1) ? 1\'b1 : 1\'b0;\n')
        fh.write('assign write1 = (wr_side == 1\'b1 && count_tready == 1\'b1 && count_tvalid == 1\'b1) ? 1\'b1 : 1\'b0;\n')
        fh.write('\n')
        fh.write('// main clock process\n')
        fh.write('always @(posedge clk, posedge sync_reset) begin\n')
        fh.write('    if (sync_reset == 1\'b1) begin\n')
        fh.write('        wr_ptr0 <= 0;\n')
        fh.write('        wr_ptr1 <= 0;\n')
        fh.write('        wr_ptr0_inv <= 0;\n')
        fh.write('        wr_ptr1_inv <= 0;\n')
        fh.write('        wr_side <= 1\'b0;\n')
        fh.write('        rd_ptr0 <= 0;\n')
        fh.write('        rd_ptr1 <= 0;\n')
        fh.write('        state <= S_IDLE;\n')
        fh.write('        start_sig <= 1\'b0;\n')
        fh.write('        rd_tdata <= 0;\n')
        fh.write('        rd_en <= 1\'b0;\n')
        fh.write('        rd_side <= 1\'b1;\n')
        fh.write('        rd_tvalid <= 1\'b0;\n')
        fh.write('        rd_start <= 1\'b0;\n')
        fh.write('        rd0_finish <= 1\'b0;\n')
        fh.write('        rd1_finish <= 1\'b0;\n')
        fh.write('    end else begin\n')
        fh.write('        wr_ptr0 <= next_wr_ptr0;\n')
        fh.write('        wr_ptr1 <= next_wr_ptr1;\n')
        fh.write('        wr_ptr0_inv <= next_wr_ptr0_inv;\n')
        fh.write('        wr_ptr1_inv <= next_wr_ptr1_inv;\n')
        fh.write('        wr_side <= next_wr_side;\n')
        fh.write('        rd_ptr0 <= next_rd_ptr0;\n')
        fh.write('        rd_ptr1 <= next_rd_ptr1;\n')
        fh.write('        state <= next_state;\n')
        fh.write('        start_sig <= next_start_sig;\n')
        fh.write('        rd_en <= next_rd_en;\n')
        fh.write('        rd_side <= next_rd_side;\n')
        fh.write('        rd_tdata <= next_rd_tdata;\n')
        fh.write('        rd_tvalid <= next_rd_tvalid;\n')
        fh.write('        rd_start <= next_rd_start;\n')
        fh.write('        rd0_finish <= next_rd0_finish;\n')
        fh.write('        rd1_finish <= next_rd1_finish;\n')
        fh.write('    end\n')
        fh.write('end\n')
        fh.write('\n')
        fh.write('always @(posedge clk) begin\n')
        fh.write('    we0 <= next_we0;\n')
        fh.write('    we1 <= next_we1;\n')
        fh.write('    wr_data <= next_wr_data;\n')
        fh.write('    rd_en_d <= {{rd_en_d[1:0], rd_en}};\n')
        fh.write('    rd_side_d <= {{rd_side_d[1:0], rd_side}};\n')
        fh.write('    start_sig_d <= {{start_sig_d[1:0], start_sig}};\n')
        fh.write('    roll_over_s <= fft_size - 1;\n')
        fh.write('end\n')
        fh.write('\n')
        fh.write('always @*\n')
        fh.write('begin\n')
        fh.write('    count_tready = 1\'b0;\n')
        fh.write('    next_we0 = 1\'b0;\n')
        fh.write('    next_we1 = 1\'b0;\n')
        fh.write('    next_wr_data = {{(((DATA_WIDTH - 1))-((0))+1){{1\'b0}}}};\n')
        fh.write('    next_wr_ptr0 = wr_ptr0;\n')
        fh.write('    next_wr_ptr1 = wr_ptr1;\n')
        fh.write('    next_wr_ptr0_inv = wr_ptr0_inv;\n')
        fh.write('    next_wr_ptr1_inv = wr_ptr1_inv;\n')
        fh.write('    next_wr_side = wr_side;\n')
        fh.write('    if (count_tvalid == 1\'b1) begin\n')
        fh.write('        if (wr_side == 1\'b0) begin\n')
        fh.write('            if (full0 == 1\'b0) begin\n')
        fh.write('                next_we0 = 1\'b1;\n')
        fh.write('                count_tready = 1\'b1;\n')
        fh.write('                next_wr_data = count_tdata;\n')
        fh.write('                if (final_cnt == 1\'b1) begin\n')
        fh.write('                    next_wr_ptr0 = {{1\'b1,count[ADDR_MSB:0]}};\n')
        fh.write('                    next_wr_ptr0_inv = {{1\'b1,roll_over & ( ~count[ADDR_MSB:0])}};\n')
        fh.write('                    next_wr_side = 1\'b1;\n')
        fh.write('                end else begin\n')
        fh.write('                    next_wr_ptr0 = {{1\'b0,count[ADDR_MSB:0]}};\n')
        fh.write('                    next_wr_ptr0_inv = {{1\'b0,roll_over & ( ~count[ADDR_MSB:0])}};\n')
        fh.write('                end\n')
        fh.write('            end\n')
        fh.write('        end else begin\n')
        fh.write('            if (full1 == 1\'b0) begin\n')
        fh.write('                next_we1 = 1\'b1;\n')
        fh.write('                count_tready = 1\'b1;\n')
        fh.write('                next_wr_data = count_tdata;\n')
        fh.write('                if (final_cnt == 1\'b1) begin\n')
        fh.write('                    next_wr_ptr1 = {{1\'b1,count[ADDR_MSB:0]}};\n')
        fh.write('                    next_wr_ptr1_inv = {{1\'b1,roll_over & ( ~count[ADDR_MSB:0])}};\n')
        fh.write('                    next_wr_side = 1\'b0;\n')
        fh.write('                end else begin\n')
        fh.write('                    next_wr_ptr1 = {{1\'b0, count[ADDR_MSB:0]}};\n')
        fh.write('                    next_wr_ptr1_inv = {{1\'b0, roll_over & ( ~count[ADDR_MSB:0])}};\n')
        fh.write('                end\n')
        fh.write('            end\n')
        fh.write('        end\n')
        fh.write('    end\n')
        fh.write('end\n')
        fh.write('\n')
        fh.write('always @*\n')
        fh.write('begin\n')
        fh.write('    next_rd_ptr0 = rd_ptr0;\n')
        fh.write('    next_rd_ptr1 = rd_ptr1;\n')
        fh.write('    next_rd_side = rd_side;\n')
        fh.write('    next_rd0_finish = rd0_finish;\n')
        fh.write('    next_rd1_finish = rd1_finish;\n')
        fh.write('    next_state = state;\n')
        fh.write('    next_rd_en = 1\'b0;\n')
        fh.write('    next_start_sig = 1\'b0;\n')
        fh.write('    case(state)\n')
        fh.write('        S_IDLE :\n')
        fh.write('        begin\n')
        fh.write('            if (rd_side == 1\'b1 && full0 == 1\'b1 && rd_tready == 1\'b1) begin\n')
        fh.write('                next_rd_side = 1\'b0;\n')
        fh.write('                next_rd_en = 1\'b1;\n')
        fh.write('                next_rd_ptr0 = 0;\n')
        fh.write('                next_rd_ptr1 = 0;\n')
        fh.write('                next_state = S_READ0;\n')
        fh.write('                next_start_sig = 1\'b1;\n')
        fh.write('            end else if (rd_side == 1\'b0 && full1 == 1\'b1 && rd_tready == 1\'b1) begin\n')
        fh.write('                next_rd_side = 1\'b1;\n')
        fh.write('                next_rd_en = 1\'b1;\n')
        fh.write('                next_rd_ptr1 = 0;\n')
        fh.write('                next_rd_ptr0 = 0;\n')
        fh.write('                next_state = S_READ1;\n')
        fh.write('                next_start_sig = 1\'b1;\n')
        fh.write('            end\n')
        fh.write('            if (write0 == 1\'b1) begin\n')
        fh.write('                next_rd0_finish = 1\'b0;\n')
        fh.write('            end\n')
        fh.write('            if (write1 == 1\'b1) begin\n')
        fh.write('                next_rd1_finish = 1\'b0;\n')
        fh.write('            end\n')
        fh.write('        end\n')
        fh.write('        S_READ0 :\n')
        fh.write('        begin\n')
        fh.write('            if (write1 == 1\'b1) begin\n')
        fh.write('                next_rd1_finish = 1\'b0;\n')
        fh.write('            end\n')
        fh.write('            if (rd_tready == 1\'b1) begin\n')
        fh.write('                next_rd_en = 1\'b1;\n')
        fh.write('                next_rd_ptr0 = rd_ptr0 + 1;\n')
        fh.write('                // if (rd_ptr0 == (roll_over_s)) begin\n')
        fh.write('                //     next_rd_ptr0 = 0;\n')
        fh.write('                // end else begin\n')
        fh.write('                // end\n')
        fh.write('                if (rd_ptr0 == (roll_over_m1)) begin\n')
        fh.write('                    next_state = S_IDLE;\n')
        fh.write('                    next_rd0_finish = 1\'b1;\n')
        fh.write('                end\n')
        fh.write('            end\n')
        fh.write('        end\n')
        fh.write('        S_READ1 :\n')
        fh.write('        begin\n')
        fh.write('            if (write0 == 1\'b1) begin\n')
        fh.write('                next_rd0_finish <= 1\'b0;\n')
        fh.write('            end\n')
        fh.write('            if (rd_tready == 1\'b1) begin\n')
        fh.write('                next_rd_en = 1\'b1;\n')
        fh.write('                next_rd_ptr1 = rd_ptr1 + 1;\n')
        fh.write('                // if (rd_ptr1 == (roll_over_s)) begin\n')
        fh.write('                //     next_rd_ptr1 = 0;\n')
        fh.write('                // end else begin\n')
        fh.write('                // end\n')
        fh.write('                if (rd_ptr1 == (roll_over_m1)) begin\n')
        fh.write('                  next_state = S_IDLE;\n')
        fh.write('                  next_rd1_finish = 1\'b1;\n')
        fh.write('                end\n')
        fh.write('            end\n')
        fh.write('        end\n')
        fh.write('        default :\n')
        fh.write('        begin\n')
        fh.write('        end\n')
        fh.write('    endcase\n')
        fh.write('end\n')
        fh.write('\n')
        fh.write('always @*\n')
        fh.write('begin\n')
        fh.write('    next_rd_tvalid = 1\'b0;\n')
        fh.write('    next_rd_start = 1\'b0;\n')
        fh.write('    next_rd_tdata = rd_tdata;\n')
        fh.write('    if (rd_en_d[2] == 1\'b1) begin\n')
        fh.write('        next_rd_start = start_sig_d[2];\n')
        fh.write('        next_rd_tvalid = 1\'b1;\n')
        fh.write('        if (rd_side_d[2] == 1\'b0) begin\n')
        fh.write('            next_rd_tdata = rd_data0;\n')
        fh.write('        end else begin\n')
        fh.write('            next_rd_tdata = rd_data1;\n')
        fh.write('        end\n')
        fh.write('    end\n')
        fh.write('end\n')
        fh.write('\n')
        fh.write('count_cycle_cw16_8 #(\n')
        fh.write('    .DATA_WIDTH(DATA_WIDTH))\n')
        fh.write('u_in_count(\n')
        fh.write('    .clk(clk),\n')
        fh.write('    .sync_reset(sync_reset),\n')
        fh.write('    .s_axis_tvalid(s_axis_tvalid),\n')
        fh.write('    .s_axis_tdata(s_axis_tdata),\n')
        fh.write('    .cnt_limit(cnt_limit_in),\n')
        fh.write('    .s_axis_tready(s_axis_tready),\n')
        fh.write('    .m_axis_tvalid(count_tvalid),\n')
        fh.write('    .m_axis_tdata(count_tdata),\n')
        fh.write('    .m_axis_final_cnt(final_cnt),\n')
        fh.write('    .count(count),\n')
        fh.write('    .m_axis_tready(count_tready)\n')
        fh.write(');\n')
        fh.write('\n')
        fh.write('// latency = 3\n')
        fh.write('dp_block_read_first_ram #(\n')
        fh.write('    .DATA_WIDTH(DATA_WIDTH),\n')
        fh.write('    .ADDR_WIDTH(ADDR_WIDTH))\n')
        fh.write('u_ram_0(\n')
        fh.write('    .clk(clk),\n')
        fh.write('    .wea(we0),\n')
        fh.write('    .addra(wr_addr0),\n')
        fh.write('    .addrb(rd_addr0),\n')
        fh.write('    .dia(wr_data),\n')
        fh.write('    .dob(rd_data0)\n')
        fh.write(');\n')
        fh.write('\n')
        fh.write('  // latency = 3\n')
        fh.write('dp_block_read_first_ram #(\n')
        fh.write('    .DATA_WIDTH(DATA_WIDTH),\n')
        fh.write('    .ADDR_WIDTH(ADDR_WIDTH))\n')
        fh.write('u_ram_1(\n')
        fh.write('    .clk(clk),\n')
        fh.write('    .wea(we1),\n')
        fh.write('    .addra(wr_addr1),\n')
        fh.write('    .addrb(rd_addr1),\n')
        fh.write('    .dia(wr_data),\n')
        fh.write('    .dob(rd_data1)\n')
        fh.write(');\n')
        fh.write('\n')
        fh.write('count_cycle_cw16_18 #(\n')
        fh.write('    .DATA_WIDTH(32))\n')
        fh.write('u_out_count(\n')
        fh.write('    .clk(clk),\n')
        fh.write('    .sync_reset(sync_reset),\n')
        fh.write('    .s_axis_tvalid(rd_tvalid),\n')
        fh.write('    .s_axis_tdata(rd_tdata),\n')
        fh.write('    .cnt_limit(cnt_limit_out),\n')
        fh.write('    .start_sig(rd_start),\n')
        fh.write('    .s_axis_tready(open),\n')
        fh.write('    .af(almost_full),\n')
        fh.write('    .m_axis_tvalid(m_axis_tvalid),\n')
        fh.write('    .m_axis_tdata(m_axis_tdata),\n')
        fh.write('    .m_axis_final_cnt(m_axis_final_cnt),\n')
        fh.write('    .count(phase_s),\n')
        fh.write('    .m_axis_tready(m_axis_tready)\n')
        fh.write(');\n')
        fh.write('\n')
        fh.write('\n')
        fh.write('endmodule\n')


def gen_reader(path):
    assert(path is not None), 'User must specify Path'
    path = ret_valid_path(path)
    mod_name = 'grc_word_reader.sv'
    file_name = os.path.join(path, mod_name)
    with open(file_name, 'w') as fh:

        fh.write('/*****************************************************************************/\n')
        fh.write('//\n')
        fh.write('// Author      : Phil Vallance\n')
        fh.write('// File        : grc_word_reader.v\n')
        fh.write('// Description : Test bench utility that reads in a binary file and parses out\n')
        fh.write('//               real and complex signal components.\n')
        fh.write('//\n')
        fh.write('// Rev      Date         Comments\n')
        fh.write('// --   -----------  ------------------------------------------------------\n')
        fh.write('// Module reads a binary file (single line) of small-endian dataread\n')
        fh.write('//\n')
        fh.write('/*****************************************************************************/\n')
        fh.write('\n')
        fh.write('`timescale 1ns/100ps\n')
        fh.write('`define SEEK_SET 0\n')
        fh.write('`define SEEK_CUR 1\n')
        fh.write('`define SEEK_END 2\n')
        fh.write('\n')
        fh.write('module grc_word_reader\n')
        fh.write('#(parameter NUM_BYTES = 2,\n')
        fh.write('  parameter FRAME_SIZE = 256)\n')
        fh.write('(\n')
        fh.write('	input clk,\n')
        fh.write('	input sync_reset,\n')
        fh.write('	input enable_i,\n')
        fh.write('\n')
        fh.write('	input wire integer fd,\n')
        fh.write('\n')
        fh.write('	output valid_o,\n')
        fh.write('    output [NUM_BYTES*8 - 1:0] word_o,\n')
        fh.write('	output buffer_end_o,\n')
        fh.write('    output [63:0] len_o,\n')
        fh.write('    output [63:0] word_cnt,\n')
        fh.write('\n')
        fh.write('	input ready_i //input ready\n')
        fh.write(');\n')
        fh.write('\n')
        fh.write('// parameter FRAME_SIZE = 256;\n')
        fh.write('parameter WORD_BITS = NUM_BYTES * 8;\n')
        fh.write('\n')
        fh.write('reg valid_s = 1\'b0;\n')
        fh.write('reg next_valid;\n')
        fh.write('// reg buffer_end, next_buffer_end;\n')
        fh.write('\n')
        fh.write('integer position = 0;\n')
        fh.write('integer num_read;\n')
        fh.write('integer temp;\n')
        fh.write('integer file_len;\n')
        fh.write('integer offset;\n')
        fh.write('// reg eof;\n')
        fh.write('\n')
        fh.write('reg [WORD_BITS-1:0] word_s, next_word = 0;\n')
        fh.write('\n')
        fh.write('reg [31:0] index;\n')
        fh.write('reg [31:0] next_index = 0;\n')
        fh.write('\n')
        fh.write('reg [31:0] curr_position = 0;\n')
        fh.write('reg [31:0] next_curr_position;\n')
        fh.write('\n')
        fh.write('reg buffer_end, next_buffer_end = 0;\n')
        fh.write('\n')
        fh.write('integer num_reads;\n')
        fh.write('\n')
        fh.write('wire ready_data;\n')
        fh.write('\n')
        fh.write('reg enable_d;\n')
        fh.write('reg read_new, next_read_new;\n')
        fh.write('\n')
        fh.write('reg [63:0] word_cnt_s, next_word_cnt;\n')
        fh.write('reg [63:0] len_s, next_len_s;\n')
        fh.write('reg [WORD_BITS - 1:0] memory [FRAME_SIZE - 1:0];\n')
        fh.write('\n')
        fh.write('assign ready_data = (valid_s == 1\'b0 | (valid_s == 1\'b1 && ready_i == 1\'b1));\n')
        fh.write('assign valid_o = valid_s;\n')
        fh.write('assign buffer_end_o = buffer_end;\n')
        fh.write('assign len_o = len_s;\n')
        fh.write('assign word_o = word_s;\n')
        fh.write('assign word_cnt = word_cnt_s;\n')
        fh.write('\n')
        fh.write('task tsk_file_params;\n')
        fh.write('begin\n')
        fh.write('    #5\n')
        fh.write('    $display("Reader : file descriptor = %d",fd);\n')
        fh.write('    // $display("current file position = %d", $ftell(fd));\n')
        fh.write('    temp = $fseek(fd, 0, `SEEK_END);\n')
        fh.write('    file_len = $ftell(fd);\n')
        fh.write('    $display("Reader : file length = %d",file_len);\n')
        fh.write('end\n')
        fh.write('endtask\n')
        fh.write('\n')
        fh.write('task tsk_read_data(input [31:0] curr_position);\n')
        fh.write('begin\n')
        fh.write('    offset = $fseek(fd, curr_position, `SEEK_SET);\n')
        fh.write('	//$display("Reader - current file offset = %d, curr_position = %d", offset, curr_position);\n')
        fh.write('    $display("Reader - current file position = %d", $ftell(fd));\n')
        fh.write('    // read FRAME_SIZE into memory buffer.\n')
        fh.write('    if (FRAME_SIZE > (file_len / NUM_BYTES)) begin\n')
        fh.write('        num_reads = file_len / NUM_BYTES;\n')
        fh.write('    end else begin\n')
        fh.write('        num_reads = FRAME_SIZE;\n')
        fh.write('    end\n')
        fh.write('    num_read = $fread(memory, fd, 0, num_reads);  //Read in whole number of words.\n')
        fh.write('    $display("number of bytes read = %d, frame size = %d", num_read, FRAME_SIZE);\n')
        fh.write('    $display("memory read time @%0dns",$time);\n')
        fh.write('end\n')
        fh.write('endtask\n')
        fh.write('\n')
        fh.write('initial\n')
        fh.write('begin\n')
        fh.write('	tsk_file_params();\n')
        fh.write('    tsk_read_data(0);\n')
        fh.write('end\n')
        fh.write('always @(posedge clk) begin\n')
        fh.write('    if (sync_reset == 1\'b1) begin\n')
        fh.write('        valid_s <= 1\'b0;\n')
        fh.write('        word_s <= 0;\n')
        fh.write('        index <= 0;\n')
        fh.write('        buffer_end <= 1\'b0;\n')
        fh.write('        len_s <= 64\'d0;\n')
        fh.write('        word_cnt_s <= 0;\n')
        fh.write('	    enable_d <= 1\'b0;\n')
        fh.write('	    curr_position <= 0;\n')
        fh.write('        tsk_read_data(0);\n')
        fh.write('	    read_new <= 1\'b0;\n')
        fh.write('    end else begin\n')
        fh.write('        valid_s <= next_valid;\n')
        fh.write('        word_s <= next_word;\n')
        fh.write('        index <= next_index;\n')
        fh.write('        buffer_end <= next_buffer_end;\n')
        fh.write('        len_s <= next_len_s;\n')
        fh.write('        word_cnt_s <= next_word_cnt;\n')
        fh.write('	    enable_d <= enable_i;\n')
        fh.write('	    curr_position <= next_curr_position;\n')
        fh.write('	    read_new <= next_read_new;\n')
        fh.write('    end\n')
        fh.write('end\n')
        fh.write('\n')
        fh.write('always @*\n')
        fh.write('begin\n')
        fh.write('    next_word = word_s;\n')
        fh.write('    next_valid = valid_s;\n')
        fh.write('    next_index = index;\n')
        fh.write('    next_buffer_end = buffer_end;\n')
        fh.write('    next_len_s = len_s;\n')
        fh.write('    next_word_cnt = word_cnt_s;\n')
        fh.write('	next_curr_position = curr_position;\n')
        fh.write('	next_read_new = 1\'b0;\n')
        fh.write('	if (read_new) begin\n')
        fh.write('		//$display("curr position = %d", curr_position);\n')
        fh.write('		tsk_read_data(curr_position);\n')
        fh.write('	end\n')
        fh.write('	\n')
        fh.write('	if (enable_d == 1\'b1 && buffer_end == 1\'b0) begin\n')
        fh.write('        if (ready_data == 1\'b1) begin\n')
        fh.write('			next_valid = 1\'b1;\n')
        fh.write('			next_word = memory[index];\n')
        fh.write('			next_index = index + 1;\n')
        fh.write('			next_buffer_end = 1\'b0;\n')
        fh.write('            next_word_cnt = word_cnt_s + 1;\n')
        fh.write('            if (index == num_reads - 1) begin\n')
        fh.write('                // read new data into memory\n')
        fh.write('                // get current file position.\n')
        fh.write('                offset = $ftell(fd);\n')
        fh.write('	        	next_curr_position = offset;\n')
        fh.write('		        next_read_new = 1\'b1;\n')
        fh.write('                next_index = 0;\n')
        fh.write('                if ((offset + 1) > file_len) begin\n')
        fh.write('                    next_buffer_end = 1\'b1;\n')
        fh.write('		            next_curr_position = 0;\n')
        fh.write('                end else begin\n')
        fh.write('                    next_len_s = len_s + (num_read / NUM_BYTES);\n')
        fh.write('                end\n')
        fh.write('            end\n')
        fh.write('        end else begin\n')
        fh.write('            if (ready_data == 1\'b1) begin\n')
        fh.write('                next_valid = 1\'b0;\n')
        fh.write('            end\n')
        fh.write('            if (buffer_end == 1\'b1) begin\n')
        fh.write('                next_len_s = len_s + (num_read / NUM_BYTES);\n')
        fh.write('            end\n')
        fh.write('        end\n')
        fh.write('    end else begin\n')
        fh.write('	    if (ready_data == 1\'b1) begin\n')
        fh.write('		    next_valid = 1\'b0;\n')
        fh.write('	    end\n')
        fh.write('	end\n')
        fh.write('end\n')
        fh.write('\n')
        fh.write('endmodule\n')


def gen_writer(path):
    assert(path is not None), 'User must specify Path'
    path = ret_valid_path(path)
    mod_name = 'grc_word_writer.sv'
    file_name = os.path.join(path, mod_name)
    with open(file_name, 'w') as fh:

        fh.write('/*****************************************************************************/\n')
        fh.write('//\n')
        fh.write('// Author      : Phil Vallance\n')
        fh.write('// File        : grc_complex_writer.sv\n')
        fh.write('// Description : Simulation utility used to record data to a binary file.\n')
        fh.write('//\n')
        fh.write('//\n')
        fh.write('//\n')
        fh.write('// Rev      Date         Comments\n')
        fh.write('// --   -----------  ------------------------------------------------------\n')
        fh.write('// Module reads a binary file (single line) of small-endian dataread\n')
        fh.write('//\n')
        fh.write('/*****************************************************************************/\n')
        fh.write('// This module collects data and writes the data to a file.\n')
        fh.write('// The module will collect data either as a LISTEN_ONLY device looking for a valid data transaction,\n')
        fh.write('// or as a termination device performing wishbone signaling to the data source.\n')
        fh.write('//\n')
        fh.write('// The data will be accumulated in the array defined by ARRAY_LENGTH.  The data width is define by 16 bits.\n')
        fh.write('// Once the data is full, the buffer will be written to the file defined by FileName_i.  This can be a simple\n')
        fh.write('// directory or a full pathname.  Once the buffer is written, the buffer will cleared and the data will continue\n')
        fh.write('// to be accumulated.  A wr_file = \'1\' will force the module to write the buffer contents at the next valid data sample.\n')
        fh.write('//\n')
        fh.write('// On the first buffer write to the file, information about the data and its source is written to the start of\n')
        fh.write('// the file followed by the data.  Successive writes will append the original file with more data.  A reset will\n')
        fh.write('// cause the module to create a new file.  During a typical simulation, the module will create a file and continue\n')
        fh.write('// writing data to the file throughout the simulation.  The file size is only limited by the host file system.\n')
        fh.write('// Using a small buffer size will slow simulation due to frequent writes to the filesystem.\n')
        fh.write('// MINIMUM BUFFER SIZE = 3\n')
        fh.write('// Using a large buffer size (100M) may cause problems with availability of system memory. If simulation is stopped\n')
        fh.write('// before the buffer is filled, a file will not be created unless wr_file is activated.\n')
        fh.write('//\n')
        fh.write('//\n')
        fh.write('//\n')
        fh.write('`timescale 1ns/100ps\n')
        fh.write('`define SEEK_SET 0\n')
        fh.write('`define SEEK_CUR 1\n')
        fh.write('`define SEEK_END 2\n')
        fh.write('\n')
        fh.write('\n')
        fh.write('module grc_word_writer #(\n')
        fh.write('	parameter LISTEN_ONLY = 0,\n')
        fh.write('	parameter ARRAY_LENGTH = 1024,\n')
        fh.write('	parameter NUM_BYTES = 2,\n')
        fh.write('	parameter MAX_WRITES = 1000000)\n')
        fh.write('(\n')
        fh.write('	input clk,\n')
        fh.write('	input sync_reset,\n')
        fh.write('	input enable,\n')
        fh.write('\n')
        fh.write('	input wire integer fd,\n')
        fh.write('\n')
        fh.write('	input valid,\n')
        fh.write('	input [NUM_BYTES * 8 - 1:0] word,\n')
        fh.write('\n')
        fh.write('	input wr_file,\n')
        fh.write('	output [63:0] word_cnt,\n')
        fh.write('\n')
        fh.write('	input rdy_i,\n')
        fh.write('	output rdy_o\n')
        fh.write(');\n')
        fh.write('\n')
        fh.write('function integer clog2;\n')
        fh.write(' //\n')
        fh.write(' // ceiling( log2( x ) )\n')
        fh.write(' //\n')
        fh.write(' input integer x;\n')
        fh.write(' begin\n')
        fh.write('   if (x<=0) clog2 = -1;\n')
        fh.write('   else clog2 = 0;\n')
        fh.write('   x = x - 1;\n')
        fh.write('   while (x>0) begin\n')
        fh.write('     clog2 = clog2 + 1;\n')
        fh.write('     x = x >> 1;\n')
        fh.write('   end\n')
        fh.write(' end\n')
        fh.write('endfunction\n')
        fh.write('\n')
        fh.write('localparam INDEX_BITS = clog2(ARRAY_LENGTH-1);\n')
        fh.write('localparam WORD_MSB = NUM_BYTES * 8 - 1;\n')
        fh.write('\n')
        fh.write('reg fifo_full_s;\n')
        fh.write('reg fifo_full_d1, fifo_full_d2;\n')
        fh.write('wire rdy_s;\n')
        fh.write('\n')
        fh.write('integer index, next_index;\n')
        fh.write('integer index_copy, next_index_copy;\n')
        fh.write('integer index_wr, next_index_wr;\n')
        fh.write('\n')
        fh.write('reg [WORD_MSB:0] word_array [ARRAY_LENGTH-1:0];\n')
        fh.write('reg [WORD_MSB:0] word_array_copy [ARRAY_LENGTH-1:0];\n')
        fh.write('reg [WORD_MSB:0] next_word_array_copy [ARRAY_LENGTH-1:0];\n')
        fh.write('reg [WORD_MSB:0] next_value;\n')
        fh.write('\n')
        fh.write('reg [63:0] word_cnt_s, next_word_cnt;\n')
        fh.write('\n')
        fh.write('wire take_data;\n')
        fh.write('\n')
        fh.write('assign take_data = (LISTEN_ONLY == 0) ? (valid & rdy_i) : valid;\n')
        fh.write('assign rdy_s = (LISTEN_ONLY == 0) ? rdy_i : 1\'b1;\n')
        fh.write('assign rdy_o = rdy_s;\n')
        fh.write('assign word_cnt = word_cnt_s;\n')
        fh.write('\n')
        fh.write('//integer numRead;\n')
        fh.write('integer temp;\n')
        fh.write('integer position = 0;\n')
        fh.write('// integer file_len;\n')
        fh.write('\n')
        fh.write('task tsk_reset;\n')
        fh.write('	#5\n')
        fh.write('	// $display("writer fd = %d",fd);\n')
        fh.write('	// temp = $fseek(fd, position, `SEEK_END);\n')
        fh.write('	// file_len = $ftell(fd);\n')
        fh.write('	// $display("Reader : file length = %d",file_len);\n')
        fh.write('	temp = $fseek(fd, position, `SEEK_SET);\n')
        fh.write('endtask\n')
        fh.write('\n')
        fh.write('initial\n')
        fh.write('begin\n')
        fh.write('    tsk_reset();\n')
        fh.write('end\n')
        fh.write('\n')
        fh.write('integer ii;\n')
        fh.write('always @(posedge clk) begin:clk_process\n')
        fh.write('	if (sync_reset) begin\n')
        fh.write('		for (ii = 0; ii < ARRAY_LENGTH; ii = ii + 1) begin\n')
        fh.write('			word_array[ii] <= 0;\n')
        fh.write('			word_array_copy[ii] <= 0;\n')
        fh.write('			next_word_array_copy[ii] <= 0;\n')
        fh.write('		end\n')
        fh.write('		index <= 0;\n')
        fh.write('		index_copy <= 0;\n')
        fh.write('		index_wr <= 0;\n')
        fh.write('		fifo_full_d1 <= 1\'b0;\n')
        fh.write('		fifo_full_d2 <= 1\'b0;\n')
        fh.write('		word_cnt_s <= 0;\n')
        fh.write('	end else if (enable == 1\'b1) begin\n')
        fh.write('		index <= next_index;\n')
        fh.write('		index_copy <= next_index_copy;\n')
        fh.write('		index_wr <= next_index_wr;\n')
        fh.write('		word_array[index] <= next_value;\n')
        fh.write('		for (ii = 0; ii < ARRAY_LENGTH; ii = ii + 1) begin\n')
        fh.write('			word_array_copy[ii] <= next_word_array_copy[ii];\n')
        fh.write('		end\n')
        fh.write('		fifo_full_d1 <= fifo_full_s;\n')
        fh.write('		fifo_full_d2 <= fifo_full_d1;\n')
        fh.write('		word_cnt_s <= next_word_cnt;\n')
        fh.write('	end\n')
        fh.write('end\n')
        fh.write('\n')
        fh.write('integer num_written = 0;\n')
        fh.write('\n')
        fh.write('always @*\n')
        fh.write('begin:array_fil\n')
        fh.write('	next_value = word[index];\n')
        fh.write('	next_index = index;\n')
        fh.write('	next_index_copy = index_copy;\n')
        fh.write('	next_index_wr = index_wr;\n')
        fh.write('	next_word_cnt = word_cnt;\n')
        fh.write('	fifo_full_s = 1\'b0;\n')
        fh.write('	next_value = word;\n')
        fh.write('	if (take_data == 1\'b1) begin\n')
        fh.write('		next_word_cnt = word_cnt + 1;\n')
        fh.write('		if (wr_file == 1\'b1 || index == ARRAY_LENGTH-1) begin\n')
        fh.write('			fifo_full_s = 1\'b1;\n')
        fh.write('			next_index = 0;\n')
        fh.write('			next_index_copy = index;\n')
        fh.write('		end else begin\n')
        fh.write('			next_index = index + 1;\n')
        fh.write('		end\n')
        fh.write('	end\n')
        fh.write('	if (fifo_full_d1 == 1\'b1) begin\n')
        fh.write('		for (ii = 0; ii < ARRAY_LENGTH; ii = ii + 1) begin\n')
        fh.write('			next_word_array_copy[ii] = word_array[ii];\n')
        fh.write('		end\n')
        fh.write('		next_index_wr = index_copy;\n')
        fh.write('	end\n')
        fh.write('end\n')
        fh.write('\n')
        fh.write('always @*\n')
        fh.write('begin:file_write\n')
        fh.write('	integer ii;\n')
        fh.write('	integer jj;\n')
        fh.write('	integer result;\n')
        fh.write('	integer lidx, ridx;\n')
        fh.write('\n')
        fh.write('	if (sync_reset == 1\'b1) begin\n')
        fh.write('		tsk_reset();\n')
        fh.write('	end else if (fifo_full_d2 == 1\'b1) begin\n')
        fh.write('		for (ii = 0; ii < (index_wr + 1); ii = ii + 1) begin\n')
        fh.write('			for (jj = 0; jj < NUM_BYTES; jj = jj + 1) begin\n')
        fh.write('				lidx = (NUM_BYTES - jj) * 8 - 1;\n')
        fh.write('				$fwrite(fd, "%c", word_array_copy[ii][lidx-:8]);\n')
        fh.write('			end\n')
        fh.write('			// $display("writing : %d, %d", word_array_copy[ii], ii);\n')
        fh.write('		end\n')
        fh.write('		result = $ftell(fd);\n')
        fh.write('		$display("File has %0d bytes", result);\n')
        fh.write('		$display("File Descripter %0d", fd);\n')
        fh.write('		$fflush(fd);\n')
        fh.write('		$display("Number of words written = %d", index_wr + 1);\n')
        fh.write('	end\n')
        fh.write('end\n')
        fh.write('\n')
        fh.write('\n')
        fh.write('endmodule\n')
